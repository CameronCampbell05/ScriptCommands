{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction What Are They? Script Commands are comments that run code when you press ENTER . They can automate tasks, improve organisation, and optimise workflows. Some examples of how Script commands can help you save time is by automatically inserting modules or importing boilerplate code into your script. In addition, Script Commands can help to optimise workflows as they make it easier for developers to automate tasks. Script Commands are contained inside ModuleScripts , which are refered to as Plugins (not to be confused with Roblox Studio plugins). Script Commands Plugins must contain at least 1 main command but there isn't a minimum or maximum limit for the amount of sub-commands that a Plugin can have. To learn how to create your own Script Commands Plugin click here Heres a loosely written format that every Script Command follows: -- [mainCommand.subCommand.subCommand2] arguement, dictionary=arguement Quick Demo This is a demo of the built-in \"Insert\" command.","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#what-are-they","text":"Script Commands are comments that run code when you press ENTER . They can automate tasks, improve organisation, and optimise workflows. Some examples of how Script commands can help you save time is by automatically inserting modules or importing boilerplate code into your script. In addition, Script Commands can help to optimise workflows as they make it easier for developers to automate tasks. Script Commands are contained inside ModuleScripts , which are refered to as Plugins (not to be confused with Roblox Studio plugins). Script Commands Plugins must contain at least 1 main command but there isn't a minimum or maximum limit for the amount of sub-commands that a Plugin can have. To learn how to create your own Script Commands Plugin click here Heres a loosely written format that every Script Command follows: -- [mainCommand.subCommand.subCommand2] arguement, dictionary=arguement","title":"What Are They?"},{"location":"#quick-demo","text":"","title":"Quick Demo"},{"location":"#this-is-a-demo-of-the-built-in-insert-command","text":"","title":"This is a demo of the built-in \"Insert\" command."},{"location":"CreateYourOwnPlugins/","text":"Create Your Own Plugins The guide below will show you how to create a plugin for Script Commands . All mentions of the word Plugin below refer to \"Script Commands\" plugins, NOT \"Roblox Studio\" plugins. Step 1: Create a new folder in ServerStorage called ScriptCommandsPlugins . Warning By default, all plugins will automatically be reloaded when the ScriptCommandsPlugins Folder (or any of its children) are changed. You can prevent this automatic reloading behaviour by adding an attribute called \"Passive\" to the ScriptCommandsPlugins Folder and setting its value to \"true\". You will now have to run the -- [reload] command to see your changes (after modifying a plugin inside of ScriptCommandsPlugins ). Step 2: Add a new ModuleScript to the newly created ScriptCommandsPlugins folder. The name of this ModuleScript will be the name of the command. In this tutorial the name of the ModuleScript will be Testing . Set the code inside of of the newly created \"Testing\" ModuleScript to the following: return function () return \"-- Hello World!\" , \"newLine\" end The code above returns a function (which will run when the \"Testing\" Script Command is ran). The function returns 2 things. The first thing returned is the text to display, and the second thing dictates where it will be displayed. The 2 dictation types are newLine and sameLine . newLine writes the text (that is returned) underneath the command executed, and sameLine overwrites the text that is on the line that command was executed on. You can test out the command you just made by going into any script (that isn't a plugin script) and running the command: -- [testing] Step 3: Convert the command to be subcommand by modifying the code to the following: local Testing = {} function Testing . hello () return \"-- Hello World\" , \"newLine\" end return Testing The code above creates a table called \"Testing\" and adds a function called \"hello()\" to it. When you run the subcommand -- [testing.hello] you will get the same results as when you previously ran -- [testing] in \"Step 2\". Step 4: Add another subcommand to your Plugin by appending the following code just before return Testing inside of the ModuleScript called Testing . function Testing . goodbye () return \"-- Goodbye World\" , \"sameLine\" end More information about making plugins can be found in the Plugin API section.","title":"Create Your Own Plugins"},{"location":"CreateYourOwnPlugins/#create-your-own-plugins","text":"","title":"Create Your Own Plugins"},{"location":"CreateYourOwnPlugins/#the-guide-below-will-show-you-how-to-create-a-plugin-for-script-commandsall-mentions-of-the-word-plugin-below-refer-to-script-commands-plugins-not-roblox-studio-plugins","text":"Step 1: Create a new folder in ServerStorage called ScriptCommandsPlugins . Warning By default, all plugins will automatically be reloaded when the ScriptCommandsPlugins Folder (or any of its children) are changed. You can prevent this automatic reloading behaviour by adding an attribute called \"Passive\" to the ScriptCommandsPlugins Folder and setting its value to \"true\". You will now have to run the -- [reload] command to see your changes (after modifying a plugin inside of ScriptCommandsPlugins ). Step 2: Add a new ModuleScript to the newly created ScriptCommandsPlugins folder. The name of this ModuleScript will be the name of the command. In this tutorial the name of the ModuleScript will be Testing . Set the code inside of of the newly created \"Testing\" ModuleScript to the following: return function () return \"-- Hello World!\" , \"newLine\" end The code above returns a function (which will run when the \"Testing\" Script Command is ran). The function returns 2 things. The first thing returned is the text to display, and the second thing dictates where it will be displayed. The 2 dictation types are newLine and sameLine . newLine writes the text (that is returned) underneath the command executed, and sameLine overwrites the text that is on the line that command was executed on. You can test out the command you just made by going into any script (that isn't a plugin script) and running the command: -- [testing] Step 3: Convert the command to be subcommand by modifying the code to the following: local Testing = {} function Testing . hello () return \"-- Hello World\" , \"newLine\" end return Testing The code above creates a table called \"Testing\" and adds a function called \"hello()\" to it. When you run the subcommand -- [testing.hello] you will get the same results as when you previously ran -- [testing] in \"Step 2\". Step 4: Add another subcommand to your Plugin by appending the following code just before return Testing inside of the ModuleScript called Testing . function Testing . goodbye () return \"-- Goodbye World\" , \"sameLine\" end More information about making plugins can be found in the Plugin API section.","title":"The guide below will show you how to create a plugin for Script Commands.All mentions of the word Plugin below refer to \"Script Commands\" plugins, NOT \"Roblox Studio\" plugins."},{"location":"Installation/","text":"Installation Method 1: Roblox Plugin Library [RECOMMENDED] 1. Go to the plugins page here . 2. Install the plugin. Method 2: Command Bar In Studio 1. Run the code below in the command bar inside of Studio game : GetObjects ( \"rbxassetid://10361565688\" )[ 1 ]. Parent = game : GetService ( \"ServerStorage\" ) 2. Right-Click the ScriptCommands folder that has just been inserted into ServerStorage . Then in the context menu press Save As Local Plugin... .","title":"Installation"},{"location":"Installation/#installation","text":"","title":"Installation"},{"location":"Installation/#method-1-roblox-plugin-library-recommended","text":"1. Go to the plugins page here . 2. Install the plugin.","title":"Method 1: Roblox Plugin Library [RECOMMENDED]"},{"location":"Installation/#method-2-command-bar-in-studio","text":"1. Run the code below in the command bar inside of Studio game : GetObjects ( \"rbxassetid://10361565688\" )[ 1 ]. Parent = game : GetService ( \"ServerStorage\" ) 2. Right-Click the ScriptCommands folder that has just been inserted into ServerStorage . Then in the context menu press Save As Local Plugin... .","title":"Method 2: Command Bar In Studio"},{"location":"Built-In%20Plugins/ImportSelected/","text":"Import Selected -- [importselected] This plugin imports what you currently have selected in the Explorer into the script you're currently editing. require() will automatically be wrapped around any ModuleScript 's that are imported - to disable this behaviour set autoRequire to false in the command's arguements. Command Arguements Optional Arguements What It Does autoRequire=false disables the default behaviour of all imported ModuleScripts being automatically wrapped with require()","title":"Import Selected"},{"location":"Built-In%20Plugins/ImportSelected/#import-selected","text":"","title":"Import Selected"},{"location":"Built-In%20Plugins/ImportSelected/#-importselected","text":"This plugin imports what you currently have selected in the Explorer into the script you're currently editing. require() will automatically be wrapped around any ModuleScript 's that are imported - to disable this behaviour set autoRequire to false in the command's arguements.","title":"-- [importselected]"},{"location":"Built-In%20Plugins/ImportSelected/#command-arguements","text":"Optional Arguements What It Does autoRequire=false disables the default behaviour of all imported ModuleScripts being automatically wrapped with require()","title":"Command Arguements"},{"location":"Built-In%20Plugins/Insert/","text":"Insert -- [insert] Insert is a powerful plugin that allows you to very quickly insert any roblox asset or raw github .lua files. Popular or useful assets/modules will have an alias in the form of a string, this is to make it even more quicker to import these packages. Examples Of Insert Command -- [insert] 5530714855 This example imports Knit using its Roblox asset ID. -- [insert] roact This example imports Roact from its alias -- [insert] https://raw.githubusercontent.com/stravant/goodsignal/master/src/init.lua This example imports GoodSignal from its github raw .lua file -- [insert] roact, Parent=game.ReplicatedStorage This example imports Roact from its alias and parents it to ReplicatedStorage List Of Current Aliases Alias Name What It References Roact Modules.Roact RoactRedux Modules.RoactRodux Rodux Modules.Rodux Fusion Modules.Fusion CustomEnum Modules.CustomEnum Symbol Modules.Symbol Maid https://raw.githubusercontent.com/Quenty/NevermoreEngine/version2/Modules/Shared/Events/Maid.lua Promise https://raw.githubusercontent.com/evaera/roblox-lua-promise/master/lib/init.lua GoodSignal https://raw.githubusercontent.com/stravant/goodsignal/master/src/init.lua Knit 5530714855 ReplicaService 6015318619 ProfileService 5331689994 FastCast 4453855787 HashLib 4544052033 ViewportHandler 3595417837 ZonePlus 6245329519 PerlinNoise 5106531086","title":"Insert"},{"location":"Built-In%20Plugins/Insert/#insert","text":"","title":"Insert"},{"location":"Built-In%20Plugins/Insert/#-insert","text":"Insert is a powerful plugin that allows you to very quickly insert any roblox asset or raw github .lua files. Popular or useful assets/modules will have an alias in the form of a string, this is to make it even more quicker to import these packages.","title":"-- [insert]"},{"location":"Built-In%20Plugins/Insert/#examples-of-insert-command","text":"-- [insert] 5530714855 This example imports Knit using its Roblox asset ID. -- [insert] roact This example imports Roact from its alias -- [insert] https://raw.githubusercontent.com/stravant/goodsignal/master/src/init.lua This example imports GoodSignal from its github raw .lua file -- [insert] roact, Parent=game.ReplicatedStorage This example imports Roact from its alias and parents it to ReplicatedStorage","title":"Examples Of Insert Command"},{"location":"Built-In%20Plugins/Insert/#list-of-current-aliases","text":"Alias Name What It References Roact Modules.Roact RoactRedux Modules.RoactRodux Rodux Modules.Rodux Fusion Modules.Fusion CustomEnum Modules.CustomEnum Symbol Modules.Symbol Maid https://raw.githubusercontent.com/Quenty/NevermoreEngine/version2/Modules/Shared/Events/Maid.lua Promise https://raw.githubusercontent.com/evaera/roblox-lua-promise/master/lib/init.lua GoodSignal https://raw.githubusercontent.com/stravant/goodsignal/master/src/init.lua Knit 5530714855 ReplicaService 6015318619 ProfileService 5331689994 FastCast 4453855787 HashLib 4544052033 ViewportHandler 3595417837 ZonePlus 6245329519 PerlinNoise 5106531086","title":"List Of Current Aliases"},{"location":"Built-In%20Plugins/Optimisations/","text":"Optimisations -- [optimisations] The optimisations plugin is similar to the templates plugin except it only focuses on optimisation boilerplate code. Current Optimisations Templates Name Command All -- [optimisations.all] Math -- [optimisations.math] String -- [optimisations.string] Game -- [optimisations.game] Materials -- [optimisations.materials] How To Import Optimisations More Specifically? You may not want to import all 30 lines of the maths optimisations (for example). thankfully you can add arguements at the end of the command to specify which optimisations you need. lets say (hypothetically) that you only needed abs , min and max , the command for importing those optimisations would be: -- [optimisations.math] math abs, min, max Similarly, You may want to import some optimisations from each subcommand/category. So, for example, if you wanted to import Platic , string , format , gsub , game , WaitForChild , math , abs and cos then you would execute the following Script Command: -- [optimisations.all] plastic, string, format, gsub, game, waitforchild, math, abs, cos","title":"Optimisations"},{"location":"Built-In%20Plugins/Optimisations/#optimisations","text":"","title":"Optimisations"},{"location":"Built-In%20Plugins/Optimisations/#-optimisations","text":"The optimisations plugin is similar to the templates plugin except it only focuses on optimisation boilerplate code.","title":"-- [optimisations]"},{"location":"Built-In%20Plugins/Optimisations/#current-optimisations-templates","text":"Name Command All -- [optimisations.all] Math -- [optimisations.math] String -- [optimisations.string] Game -- [optimisations.game] Materials -- [optimisations.materials]","title":"Current Optimisations Templates"},{"location":"Built-In%20Plugins/Optimisations/#how-to-import-optimisations-more-specifically","text":"You may not want to import all 30 lines of the maths optimisations (for example). thankfully you can add arguements at the end of the command to specify which optimisations you need. lets say (hypothetically) that you only needed abs , min and max , the command for importing those optimisations would be: -- [optimisations.math] math abs, min, max Similarly, You may want to import some optimisations from each subcommand/category. So, for example, if you wanted to import Platic , string , format , gsub , game , WaitForChild , math , abs and cos then you would execute the following Script Command: -- [optimisations.all] plastic, string, format, gsub, game, waitforchild, math, abs, cos","title":"How To Import Optimisations More Specifically?"},{"location":"Built-In%20Plugins/Reload/","text":"Reload -- [reload] It reloads all of the Script Commands Plugins.","title":"Reload"},{"location":"Built-In%20Plugins/Reload/#reload","text":"","title":"Reload"},{"location":"Built-In%20Plugins/Reload/#-reload","text":"It reloads all of the Script Commands Plugins.","title":"-- [reload]"},{"location":"Built-In%20Plugins/Templates/","text":"Templates -- [templates] Templates is a plugin that automatically inserts boilerplate code into the current script very quickly. Current Templates Knit Templates -- [templates.knit....] Name What It Adds Optional Arguements Setup Code that imports and starts Knit Parent (where Knit will be imported from) Service Code for creating a Knit service Name (the name of the service) Parent (where Knit will be imported from) Controller Code for creating a Knit controller Name (the name of the service) Parent (where Knit will be imported from) Misc Templates -- [templates....] Name What It Adds Optional Arguements NewPart Code that imports code for creating a new part * (all arguements must set a property of the part, for example 'Name = \"MyNewPart\"')","title":"Templates"},{"location":"Built-In%20Plugins/Templates/#templates","text":"","title":"Templates"},{"location":"Built-In%20Plugins/Templates/#-templates","text":"Templates is a plugin that automatically inserts boilerplate code into the current script very quickly.","title":"-- [templates]"},{"location":"Built-In%20Plugins/Templates/#current-templates","text":"","title":"Current Templates"},{"location":"Built-In%20Plugins/Templates/#knit-templates","text":"","title":"Knit Templates"},{"location":"Built-In%20Plugins/Templates/#-templatesknit","text":"Name What It Adds Optional Arguements Setup Code that imports and starts Knit Parent (where Knit will be imported from) Service Code for creating a Knit service Name (the name of the service) Parent (where Knit will be imported from) Controller Code for creating a Knit controller Name (the name of the service) Parent (where Knit will be imported from)","title":"-- [templates.knit....]"},{"location":"Built-In%20Plugins/Templates/#misc-templates","text":"","title":"Misc Templates"},{"location":"Built-In%20Plugins/Templates/#-templates_1","text":"Name What It Adds Optional Arguements NewPart Code that imports code for creating a new part * (all arguements must set a property of the part, for example 'Name = \"MyNewPart\"')","title":"-- [templates....]"}]}